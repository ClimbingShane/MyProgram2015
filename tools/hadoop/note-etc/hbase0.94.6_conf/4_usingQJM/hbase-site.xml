<?xml version="1.0"?>
<?xml-stylesheet type="text/xsl" href="configuration.xsl"?>
<!--
/**
 * Copyright 2010 The Apache Software Foundation
 *
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
-->
<configuration>
<property>
	<name>hbase.rootdir</name>
	<value>hdfs://lrtscluster/hbase</value>
	<description>The directory shared by region servers and into
	which HBase persists.  The URL should be 'fully-qualified'
	to include the filesystem scheme.  For example, to specify the
	HDFS directory '/hbase' where the HDFS instance's namenode is
	running at namenode.example.org on port 9000, set this value to:
	hdfs://namenode.example.org:9000/hbase.  By default HBase writes
	into /tmp.  Change this configuration else all data will be lost
	on machine restart.
	</description>
</property>
<property>
	<name>hbase.cluster.distributed</name>
	<value>true</value>
	<description>The mode the cluster will be in. Possible values are
	false for standalone mode and true for distributed mode.  If
	false, startup will run all HBase and ZooKeeper daemons together
	in the one JVM.
	</description>
</property>
<property>
	<name>hbase.master.info.port</name>
	<value>60010</value>
	<description>The port for the HBase Master web UI.
	Set to -1 if you do not want a UI instance run.
	</description>
</property>
<property>
	<name>hbase.master.info.bindAddress</name>
	<value>master</value>
	<description>The bind address for the HBase Master web UI
	</description>
</property>
<property>
    <name>hbase.regionserver.region.split.policy</name>
    <value>org.apache.hadoop.hbase.regionserver.ConstantSizeRegionSplitPolicy</value>
</property>
<property>
	<name>hbase.zookeeper.quorum</name>
	<value>master:2181,centos2:2181,centos3:2181</value>
	<description>
	Comma separated list of servers in the ZooKeeper Quorum.
	For example, "host1.mydomain.com,host2.mydomain.com,host3.mydomain.com".
	By default this is set to localhost for local and pseudo-distributed modes
	of operation. For a fully-distributed setup, this should be set to a full
	list of ZooKeeper quorum servers. If HBASE_MANAGES_ZK is set in hbase-env.sh
	this is the list of servers which we will start/stop ZooKeeper on.
	</description>
</property>

<property>
	<name>hbase.hregion.majorcompaction</name>
	<value>0</value>
	<description>The time (in miliseconds) between 'major' compactions of all
	HStoreFiles in a region.  Default: 1 day.
	Set to 0 to disable automated major compactions.
	</description>
</property>
<property>
    <name>hbase.hregion.max.filesize</name>
    <value>536870912000</value>
    <description>
    Maximum HStoreFile size. If any one of a column families' HStoreFiles has
    grown to exceed this value, the hosting HRegion is split in two.
    Default: 10G.
    </description>
</property>
<property>
    <name>hbase.hstore.blockingStoreFiles</name>
    <value>2100000000</value>
    <description>
    If more than this number of StoreFiles in any one Store
    (one StoreFile is written per flush of MemStore) then updates are
    blocked for this HRegion until a compaction is completed, or
    until hbase.hstore.blockingWaitTime has been exceeded.
    </description>
</property>
<property>
	<name>hbase.hregion.memstore.flush.size</name>
	<value>67108864</value>
	<description>
	Memstore will be flushed to disk if size of the memstore
	exceeds this number of bytes.  Value is checked by a thread that runs
	every hbase.server.thread.wakefrequency. default 128M
	</description>
</property>
<property>
    <name>hbase.hstore.compactionThreshold</name>
    <value>2100000000</value>
    <description>
    If more than this number of HStoreFiles in any one HStore
    (one HStoreFile is written per flush of memstore) then a compaction
    is run to rewrite all HStoreFiles files as one.  Larger numbers
    put off compaction but when it runs, it takes longer to complete.
    </description>
</property>
<property>
    <name>hbase.hstore.compaction.max</name>
    <value>2100000000</value>
    <description>Max number of HStoreFiles to compact per 'minor' compaction.
    </description>
</property>
<property>
    <name>hbase.hregion.memstore.mslab.enabled</name>
    <value>true</value>
    <description>
      Enables the MemStore-Local Allocation Buffer,
      a feature which works to prevent heap fragmentation under
      heavy write loads. This can reduce the frequency of stop-the-world
      GC pauses on large heaps.
    </description>
</property>
<property>
    <name>hbase.regionserver.global.memstore.upperLimit</name>
    <value>0.4</value>
    <description>Maximum size of all memstores in a region server before new
      updates are blocked and flushes are forced. Defaults to 40% of heap
    </description>
</property>
<property>
    <name>hbase.regionserver.global.memstore.lowerLimit</name>
    <value>0.35</value>
    <description>When memstores are being forced to flush to make room in
      memory, keep flushing until we hit this mark. Defaults to 35% of heap.
      This value equal to hbase.regionserver.global.memstore.upperLimit causes
      the minimum possible flushing to occur when updates are blocked due to
      memstore limiting.
    </description>
</property>
<property>
    <name>hbase.balancer.period</name>
    <value>200000000</value>
    <description>Period at which the region balancer runs in the Master.
    </description>
</property>

<property>
    <name>hbase.regionserver.wal.codec</name>
    <value>org.apache.hadoop.hbase.regionserver.wal.IndexedWALEditCodec</value>
</property>
<property>
    <name>phoenix.query.timeoutMs</name>
    <value>6000000</value>
</property>

</configuration>
